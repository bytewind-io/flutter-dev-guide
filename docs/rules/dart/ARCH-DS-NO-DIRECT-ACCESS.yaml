id: ARCH-DS-NO-DIRECT-ACCESS-DISABLED
title: "–ü–†–ê–í–ò–õ–û –û–¢–ö–õ–Æ–ß–ï–ù–û: UI –∏ BLoC –Ω–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è –∫ Firebase/SQLite/HTTP –Ω–∞–ø—Ä—è–º—É—é"
status: disabled
severity: info
category: architecture/boundaries
tags:
  - clean-architecture
  - repository
  - bloc
  - ui
  - datasource
version: 8
owners:
  - "@arch-bot"
  - "@team-arch"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
scope:
  include_paths:
    - "lib/**/ui/**"
    - "lib/**/presentation/**"
    - "lib/**/widget/**"
    - "lib/**/view/**"
    - "lib/**/bloc/**"
    - "lib/**/cubit/**"
  exclude_paths:
    - "lib/**/data/**"
    - "lib/**/infra/**"
    - "lib/**/repository/**"
    - "lib/**/repositories/**"
    - "lib/**/datasource/**"
    - "lib/**/datasources/**"
    - "lib/**/api/**"
    - "lib/**/apis/**"
    - "lib/**/network/**"
    - "lib/**/networks/**"
    - "lib/network/**"
    - "lib/networks/**"
    - "lib/**/service/**"
    - "lib/**/services/**"
    - "test/**"
    - "integration_test/**"
    # –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º home_bloc –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫–∞ AI –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç Filter –æ–±—ä–µ–∫—Ç—ã
    - "lib/**/bloc/home_bloc/**"

detect:
  # –¢–û–õ–¨–ö–û —Å–∞–º—ã–µ —è–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è - –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã SDK
  disallowed_calls:
    # Firebase singletons - –≠–¢–û —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    - "FirebaseFirestore.instance"
    - "FirebaseAuth.instance"
    - "FirebaseDatabase.instance"
    - "FirebaseStorage.instance"
    # –ü—Ä—è–º—ã–µ HTTP –≤—ã–∑–æ–≤—ã - –≠–¢–û —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    - "http.get("
    - "http.post("
    - "http.put("
    - "http.delete("
    # –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã - –≠–¢–û —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    - "HttpClient("
    - "WebSocket.connect("
    # –ü—Ä—è–º—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ - –≠–¢–û —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    - "SharedPreferences.getInstance("
    - "Isar.open("
    - "Hive.openBox("

  # –ö–†–ò–¢–ò–ß–ù–û: –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  allowed_domain_patterns:
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤)
    - ".*Filter\\("
    - ".*ThingsFilter\\("
    - "FavoriteThingsFilter\\("
    - "EmptyThingsFilter\\("
    - "TagThingsFilter\\("
    - "MultipleTagsThingsFilter\\("
    - "TextSearchThingsFilter\\("
    # –î–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ entities
    - ".*Model\\("
    - ".*Entity\\("
    - ".*Request\\("
    - ".*Response\\("

  # –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—è,
  # —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.
  allowlist_imports:
    - "package:rxdart/rxdart.dart"
    - "package:stream_transform/stream_transform.dart"
    - "package:bloc_concurrency/bloc_concurrency.dart"
    - "package:equatable/equatable.dart"
    - "package:collection/collection.dart"
    - "package:meta/meta.dart"
    - "package:get_it/get_it.dart"
    - "package:injectable/injectable.dart"
    - "dart:async"

  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –¥–∞–∂–µ –µ—Å–ª–∏ scope –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω,
  # —ç—Ç–∏ –ø—É—Ç–∏ —Å—á–∏—Ç–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∏ –Ω–µ —Ñ–ª–∞–≥–∏—Ä—É–µ–º.
  allowlist_paths:
    - "lib/**/data/**"
    - "lib/**/infra/**"
    - "lib/**/repository/**"
    - "lib/**/repositories/**"
    - "lib/**/datasource/**"
    - "lib/**/datasources/**"
    - "lib/**/api/**"
    - "lib/**/apis/**"
    - "lib/**/network/**"
    - "lib/**/networks/**"
    - "lib/network/**"
    - "lib/networks/**"
    - "lib/**/service/**"
    - "lib/**/services/**"
    # –í–†–ï–ú–ï–ù–ù–û: –ø–æ–∫–∞ AI –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç allowed_domain_patterns
    - "lib/**/bloc/home_bloc/**"

message: >
  üö´ –ü–†–ê–í–ò–õ–û –û–¢–ö–õ–Æ–ß–ï–ù–û! –ù–ï –û–ë–†–ê–©–ê–ô–¢–ï –í–ù–ò–ú–ê–ù–ò–ï –ù–ê –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï!
  
  –í–∞—à –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. _repository.fetch() –∏ —Å–æ–∑–¥–∞–Ω–∏–µ *Filter() –æ–±—ä–µ–∫—Ç–æ–≤ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è Clean Architecture.
  
  –ü—Ä–∞–≤–∏–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥.

autofix:
  suggestion_builder: minimal
  suggestion: >
    –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ FavoriteThingsFilter(), TagThingsFilter() - —ç—Ç–æ –ù–ï –Ω–∞—Ä—É—à–µ–Ω–∏–µ!
    –≠—Ç–æ –¥–æ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ *Filter().

linter_rule:
  coverage: ai

ai_hint: >
  –ü–†–ê–í–ò–õ–û –í–†–ï–ú–ï–ù–ù–û DEPRECATED - AI –ù–ï –ü–û–ù–ò–ú–ê–ï–¢ CLEAN ARCHITECTURE!
  –ù–ï –§–õ–ê–ì–ò–†–£–ô:
  1) _repository.fetch() - —ç—Ç–æ –ü–†–ê–í–ò–õ–¨–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!
  2) SearchByTextTagsFilter() - —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞, –ù–ï –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º!
  3) –õ—é–±—ã–µ *Filter(), *Model(), *Entity() - —ç—Ç–æ –¥–æ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã!
  4) –§–∞–π–ª—ã lib/**/bloc/home_bloc/** –ò–°–ö–õ–Æ–ß–ï–ù–´ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏!
  –§–õ–ê–ì–ò–†–£–ô –¢–û–õ–¨–ö–û: Firebase.instance, http.get(), SharedPreferences.getInstance() –∏ –ø–æ–¥–æ–±–Ω—ã–µ –ü–†–Ø–ú–´–ï SDK –≤—ã–∑–æ–≤—ã!

bad_snippet: docs/examples/bad/bad-datasource-in-bloc-001.dart
good_snippet: docs/examples/good/good-datasource-in-bloc-001.dart
references: []

tests:
  should_flag:
    - path: "lib/module/home/presentation/bloc/home_bloc.dart"
      content: |
        import 'package:flutter_bloc/flutter_bloc.dart';
        import 'package:cloud_firestore/cloud_firestore.dart';
        class HomeBloc extends Bloc<int, int> {
          HomeBloc(): super(0) {
            on<int>((e, emit) async {
              final uid = "x";
              await FirebaseFirestore.instance
                  .collection('item')
                  .add({'userId': uid});
              emit(state + 1);
            });
          }
        }
    - path: "lib/feature/auth/presentation/bloc/auth_bloc.dart"
      content: |
        import 'package:flutter_bloc/flutter_bloc.dart';
        import 'package:firebase_auth/firebase_auth.dart';
        class AuthBloc extends Bloc<int, int> {
          AuthBloc(): super(0) {
            on<int>((e, emit) {
              final uid = FirebaseAuth.instance.currentUser?.uid;
              emit(state + (uid == null ? 0 : 1));
            });
          }
        }

  should_pass:
    - path: "lib/network/filter_data_api.dart"
      content: |
        import 'package:cloud_firestore/cloud_firestore.dart';
        import 'package:firebase_auth/firebase_auth.dart';
        import 'package:injectable/injectable.dart';

        @Injectable(as: FilterDataApiI)
        class FilterDataApiFirebase implements FilterDataApiI {
          FilterDataApiFirebase();

          final FirebaseFirestore _firestore = FirebaseFirestore.instance;
          final FirebaseAuth _auth = FirebaseAuth.instance;

          @override
          Future<List<String>> fetchDistinctValuesForCurrentUser({
            required String field,
          }) async {
            final userId = _auth.currentUser?.uid ?? '';
            if (userId.isEmpty) return const [];

            final snapshot = await _firestore
                .collection('item')
                .where('userId', isEqualTo: userId)
                .get();

            final values = <String>{};
            for (final doc in snapshot.docs) {
              final data = doc.data()[field];
              if (data is List) {
                for (final v in data) {
                  final s = v?.toString().trim();
                  if (s != null && s.isNotEmpty) values.add(s);
                }
              } else if (data != null && data is! Map) {
                final s = data.toString().trim();
                if (s.isNotEmpty) values.add(s);
              }
            }

            final list = values.toList()
              ..sort((a, b) => a.toLowerCase().compareTo(b.toLowerCase()));
            return list;
          }
        }

        abstract class FilterDataApiI {
          Future<List<String>> fetchDistinctValuesForCurrentUser({
            required String field,
          });
        }

    - path: "lib/feature/users/data/user_repository_impl.dart"
      content: |
        import 'package:cloud_firestore/cloud_firestore.dart';
        class UserRepositoryImpl {
          final FirebaseFirestore _db;
          UserRepositoryImpl(this._db);
          Future<void> saveUser(String id) => _db.collection('users').doc(id).set({'id': id});
        }

    - path: "lib/module/home/bloc/home_bloc/home_bloc.dart"
      content: |
        import 'package:flutter_bloc/flutter_bloc.dart';
        import 'package:rxdart/rxdart.dart';
        typedef Evt<X> = EventTransformer<X>;
        Evt<E> debounceSwitchMap<E>(Duration d) =>
          (events, mapper) => events.debounceTime(d).switchMap(mapper);
        class HomeBloc extends Bloc<int, int> {
          HomeBloc(): super(0) {
            on<int>((e, emit) => emit(state + 1), transformer: debounceSwitchMap(const Duration(milliseconds: 300)));
          }
        }

    - path: "lib/feature/home/bloc/home_bloc.dart"
      content: |
        import 'package:flutter_bloc/flutter_bloc.dart';
        import 'package:get_it/get_it.dart';
        import 'package:injectable/injectable.dart';
        @Injectable()
        class HomeBloc extends Bloc<int, int> {
          HomeBloc(): _repo = GetIt.I<UserRepository>(), super(0);
          final UserRepository _repo;
        }

    - path: "lib/module/home/bloc/home_bloc.dart"
      content: |
        import 'package:bloc/bloc.dart';
        import '../../repository/things_repository/fetch_filter.dart';
        import '../../repository/things_repository/thing_repository.dart';
        
        class HomeBloc extends Bloc<HomeEvent, HomeState> {
          HomeBloc({required ThingRepositoryI thingRepository})
              : _thingRepository = thingRepository,
                super(const HomeState());
        
          final ThingRepositoryI _thingRepository;
        
          void _applyTagFilters(Set<String> tagIds) {
            FetchThingsFilter filter;
            if (tagIds.isEmpty) {
              filter = const EmptyThingsFilter();
            } else if (tagIds.length == 1) {
              filter = TagThingsFilter(tagId: tagIds.first);
            } else {
              filter = MultipleTagsThingsFilter(tagIds: tagIds);
            }
            _thingRepository.fetch(filter);
          }
        }
