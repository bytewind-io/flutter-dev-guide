#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Dart –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ pre-commit hook.
"""

import json
import os
import re
import sys
from pathlib import Path
from typing import List, Dict, Any, Tuple


class RuleChecker:
    def __init__(self, rules_file: str = "docs/mappings/rules_map.json"):
        self.rules_file = rules_file
        self.rules = self._load_rules()
        
    def _load_rules(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open(self.rules_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.rules_file}")
            return []
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ: {self.rules_file}")
            return []
    
    def get_staged_dart_files(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ staged Dart —Ñ–∞–π–ª–æ–≤."""
        try:
            import subprocess
            result = subprocess.run(
                ["git", "diff", "--cached", "--name-only", "--diff-filter=ACM"],
                capture_output=True, text=True, check=True
            )
            files = result.stdout.strip().split('\n')
            return [f for f in files if f.endswith('.dart') and f.strip()]
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ staged —Ñ–∞–π–ª–æ–≤")
            return []
    
    def check_rule(self, rule: Dict[str, Any], file_path: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É."""
        violations = []
        rule_id = rule.get('id', '')
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            return violations
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ ARCH-DS-NO-DIRECT-ACCESS
        if rule_id == "ARCH-DS-NO-DIRECT-ACCESS":
            violations.extend(self._check_no_direct_access(content, file_path))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ ARCH-IMPORT-ABSTRACTION
        elif rule_id == "ARCH-IMPORT-ABSTRACTION":
            violations.extend(self._check_import_abstraction(content, file_path))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ ARCH-REPO-STATELESS
        elif rule_id == "ARCH-REPO-STATELESS":
            violations.extend(self._check_repo_stateless(content, file_path))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ DART-I18N-NO-HARDCODED-TEXT
        elif rule_id == "DART-I18N-NO-HARDCODED-TEXT":
            violations.extend(self._check_no_hardcoded_text(content, file_path))
        
        return violations
    
    def _check_no_direct_access(self, content: str, file_path: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ ARCH-DS-NO-DIRECT-ACCESS."""
        violations = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
        patterns = [
            (r'import.*firebase', '–ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç Firebase'),
            (r'import.*sqflite', '–ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç SQLite'),
            (r'import.*http', '–ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç HTTP'),
            (r'FirebaseFirestore\.instance', '–ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Firebase'),
            (r'DatabaseHelper\(\)', '–ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLite'),
            (r'http\.get\(', '–ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å'),
            (r'http\.post\(', '–ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å'),
        ]
        
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            for pattern, description in patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    violations.append(f"  –°—Ç—Ä–æ–∫–∞ {i}: {description}")
        
        return violations
    
    def _check_import_abstraction(self, content: str, file_path: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ ARCH-IMPORT-ABSTRACTION."""
        violations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            if 'import' in line and any(keyword in line.lower() for keyword in ['repository', 'service', 'datasource']):
                if not any(abstract in line.lower() for abstract in ['_i.dart', 'interface', 'abstract']):
                    if not line.strip().startswith('//'):
                        violations.append(f"  –°—Ç—Ä–æ–∫–∞ {i}: –ò–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        
        return violations
    
    def _check_repo_stateless(self, content: str, file_path: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ ARCH-REPO-STATELESS."""
        violations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ init/setup –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
        if 'class' in content and 'Repository' in content:
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                if re.search(r'void\s+init|void\s+setup|Future<void>\s+init|Future<void>\s+setup', line):
                    violations.append(f"  –°—Ç—Ä–æ–∫–∞ {i}: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ init/setup")
        
        return violations
    
    def _check_no_hardcoded_text(self, content: str, file_path: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ DART-I18N-NO-HARDCODED-TEXT."""
        violations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ UI —Å–ª–æ–∏
        ui_path_patterns = [
            'ui/', 'presentation/', 'widget/', 'widgets/', 
            'view/', 'views/', 'page/', 'pages/', 
            'screen/', 'screens/'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ UI —Å–ª–æ–µ
        if not any(pattern in file_path for pattern in ui_path_patterns):
            return violations
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        exclude_patterns = [
            'data/', 'infra/', 'network/', 'api/', 
            'constants/', 'config/', 'test/', 'integration_test/'
        ]
        
        if any(pattern in file_path for pattern in exclude_patterns):
            return violations
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏
        hardcode_patterns = [
            (r'Text\s*\(\s*[\'"][^\'\"]*[–ê-–Ø–∞-—è–Å—ë\u4e00-\u9fff\u3040-\u309f\u30a0-\u30ff\u0600-\u06ff\u0590-\u05ff\u0100-\u017f\u1e00-\u1eff\u0370-\u03ff\u0400-\u04ff][^\'\"]*[\'"]', '–•–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ Text –≤–∏–¥–∂–µ—Ç–µ'),
            (r'label\s*:\s*[\'"][^\'\"]*[–ê-–Ø–∞-—è–Å—ë\u4e00-\u9fff\u3040-\u309f\u30a0-\u30ff\u0600-\u06ff\u0590-\u05ff\u0100-\u017f\u1e00-\u1eff\u0370-\u03ff\u0400-\u04ff][^\'\"]*[\'"]', '–•–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ label'),
            (r'title\s*:\s*[\'"][^\'\"]*[–ê-–Ø–∞-—è–Å—ë\u4e00-\u9fff\u3040-\u309f\u30a0-\u30ff\u0600-\u06ff\u0590-\u05ff\u0100-\u017f\u1e00-\u1eff\u0370-\u03ff\u0400-\u04ff][^\'\"]*[\'"]', '–•–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ title'),
            (r'hintText\s*:\s*[\'"][^\'\"]*[–ê-–Ø–∞-—è–Å—ë\u4e00-\u9fff\u3040-\u309f\u30a0-\u30ff\u0600-\u06ff\u0590-\u05ff\u0100-\u017f\u1e00-\u1eff\u0370-\u03ff\u0400-\u04ff][^\'\"]*[\'"]', '–•–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ hintText'),
            (r'tooltip\s*:\s*[\'"][^\'\"]*[–ê-–Ø–∞-—è–Å—ë\u4e00-\u9fff\u3040-\u309f\u30a0-\u30ff\u0600-\u06ff\u0590-\u05ff\u0100-\u017f\u1e00-\u1eff\u0370-\u03ff\u0400-\u04ff][^\'\"]*[\'"]', '–•–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ tooltip'),
        ]
        
        lines = content.split('\n')
        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            if any(pattern in line for pattern in ['${', 'print(', 'log(', 'debugPrint(', 'static const String', 'assets/', 'http://', 'https://', 'ftp://', 'mailto:']):
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            if any(pattern in line for pattern in ['S.of(', 'AppLocalizations.of(', 'context.l10n.', '.tr()', 'Intl.']):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            if re.search(r'[a-zA-Z0-9_]+_[a-zA-Z0-9_]+', line):
                continue
            
            for pattern, description in hardcode_patterns:
                if re.search(pattern, line):
                    violations.append(f"  –°—Ç—Ä–æ–∫–∞ {i}: {description} - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é")
        
        return violations
    
    def run_checks(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        
        dart_files = self.get_staged_dart_files()
        if not dart_files:
            print("‚úÖ –ù–µ—Ç staged Dart —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return True
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(dart_files)} Dart —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        all_violations = []
        
        for file_path in dart_files:
            print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {file_path}")
            file_violations = []
            
            for rule in self.rules:
                rule_violations = self.check_rule(rule, file_path)
                if rule_violations:
                    file_violations.append(f"  {rule['title']}:")
                    file_violations.extend(rule_violations)
            
            if file_violations:
                all_violations.append(f"\n‚ùå {file_path}:")
                all_violations.extend(file_violations)
            else:
                print(f"  ‚úÖ –§–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º")
        
        if all_violations:
            print("\n" + "="*60)
            print("‚ùå –ù–ê–†–£–®–ï–ù–ò–Ø –ü–†–ê–í–ò–õ –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
            print("="*60)
            for violation in all_violations:
                print(violation)
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
            print("   - –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dependency injection")
            print("   - –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö")
            return False
        else:
            print("\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã!")
            return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = RuleChecker()
    success = checker.run_checks()
    
    if not success:
        print("\n‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        sys.exit(1)
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    sys.exit(0)


if __name__ == "__main__":
    main()
